{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Investigating the Range as a Function of the Angle of Projection Theoretical Foundation Projectile motion follows the principles of kinematics and Newton\u2019s laws of motion. When an object is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal, its motion can be described by the following fundamental equations: Equations of Motion: \\(x = v_0 \\cos(\\theta) t\\) (Horizontal displacement) \\(y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2\\) (Vertical displacement) Time of Flight: \\[T = \\frac{2 v_0 \\sin(\\theta)}{g}\\] Maximum Height: \\[H = \\frac{v_0^2 \\sin^2(\\theta)}{2 g}\\] Range of the Projectile: \\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\] Analysis of the Range The range of the projectile depends on the launch angle \\(\\theta\\) and initial velocity \\(v_0\\) . The range formula indicates that the maximum range occurs at \\(\\theta = 45^\\circ\\) . Any deviation from this optimal angle results in a reduced range. Additionally, increasing \\(v_0\\) leads to a greater range, while higher gravitational acceleration reduces it. Further, using trigonometric identities, we analyze how the range is affected: - The derivative of the range equation with respect to \\(\\theta\\) gives: $$ \\frac{dR}{d\\theta} = \\frac{2 v_0^2 \\cos(2\\theta)}{g} $$ Setting this to zero confirms that \\(\\theta = 45^\\circ\\) maximizes the range. - If air resistance is considered, the range formula becomes: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} e^{-\\gamma T} $$ where \\(\\gamma\\) is the drag coefficient. Practical Applications Projectile motion plays a crucial role in various real-world scenarios: - Sports : Calculating the trajectory of a soccer ball, basketball shot, or golf drive using physics principles. - Ballistics : Understanding the motion of bullets or artillery shells to ensure accurate targeting. - Space Exploration : Estimating launch angles for rockets to achieve specific orbits. - Engineering : Designing bridges, dams, and structures considering projectile motion in case of falling debris. Implementation with Python Simulation Below is the Python code that simulates projectile motion and visualizes the relationship between launch angle and range. import numpy as np import matplotlib.pyplot as plt from scipy.constants import g # Function to compute the range of a projectile def projectile_range(v0, theta, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g # Define parameters v0 = 50 # Initial velocity in m/s angles = np.linspace(0, 90, 100) # Angle range from 0 to 90 degrees ranges = [projectile_range(v0, theta) for theta in angles] # Plot the range as a function of launch angle plt.figure(figsize=(8,6)) plt.plot(angles, ranges, label='Range vs Angle', color='b') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Angle\") plt.legend() plt.grid() plt.show() # Simulating projectile motion for a given angle def projectile_trajectory(v0, theta, g=9.81): theta_rad = np.radians(theta) t_flight = (2 * v0 * np.sin(theta_rad)) / g # Total flight time t = np.linspace(0, t_flight, num=100) x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y # Plot trajectories for different angles plt.figure(figsize=(8,6)) for theta in [15, 30, 45, 60, 75]: x, y = projectile_trajectory(v0, theta) plt.plot(x, y, label=f'{theta} degrees') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion for Different Angles\") plt.legend() plt.grid() plt.show() Discussion The simulation confirms that the projectile achieves maximum range at \\(\\theta = 45^\\circ\\) . This follows from the mathematical relationship \\(\\sin(2\\theta)\\) , which attains its maximum value at this angle. However, in real-world applications, several factors affect projectile motion: Air Resistance : Causes a reduction in range due to energy loss. Altitude Variations : Gravity is not constant everywhere on Earth. Wind Effects : Can alter the trajectory of projectiles significantly. Non-Uniform Launch Surfaces : In practical applications like sports and military applications, the ground is not always level. Rotational Effects : Spin and the Magnus effect impact sports projectiles such as baseballs and soccer balls. Conclusion Projectile motion provides a strong foundation for understanding various physical phenomena. Theoretical analysis and computational simulations show how different angles influence range and trajectory. By incorporating additional factors like drag, wind, and varying gravity, more accurate models can be developed for real-world applications.","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#theoretical-foundation","text":"Projectile motion follows the principles of kinematics and Newton\u2019s laws of motion. When an object is launched with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) from the horizontal, its motion can be described by the following fundamental equations:","title":"Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#equations-of-motion","text":"\\(x = v_0 \\cos(\\theta) t\\) (Horizontal displacement) \\(y = v_0 \\sin(\\theta) t - \\frac{1}{2} g t^2\\) (Vertical displacement)","title":"Equations of Motion:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"\\[T = \\frac{2 v_0 \\sin(\\theta)}{g}\\]","title":"Time of Flight:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#maximum-height","text":"\\[H = \\frac{v_0^2 \\sin^2(\\theta)}{2 g}\\]","title":"Maximum Height:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-of-the-projectile","text":"\\[R = \\frac{v_0^2 \\sin(2\\theta)}{g}\\]","title":"Range of the Projectile:"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#analysis-of-the-range","text":"The range of the projectile depends on the launch angle \\(\\theta\\) and initial velocity \\(v_0\\) . The range formula indicates that the maximum range occurs at \\(\\theta = 45^\\circ\\) . Any deviation from this optimal angle results in a reduced range. Additionally, increasing \\(v_0\\) leads to a greater range, while higher gravitational acceleration reduces it. Further, using trigonometric identities, we analyze how the range is affected: - The derivative of the range equation with respect to \\(\\theta\\) gives: $$ \\frac{dR}{d\\theta} = \\frac{2 v_0^2 \\cos(2\\theta)}{g} $$ Setting this to zero confirms that \\(\\theta = 45^\\circ\\) maximizes the range. - If air resistance is considered, the range formula becomes: $$ R = \\frac{v_0^2 \\sin(2\\theta)}{g} e^{-\\gamma T} $$ where \\(\\gamma\\) is the drag coefficient.","title":"Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#practical-applications","text":"Projectile motion plays a crucial role in various real-world scenarios: - Sports : Calculating the trajectory of a soccer ball, basketball shot, or golf drive using physics principles. - Ballistics : Understanding the motion of bullets or artillery shells to ensure accurate targeting. - Space Exploration : Estimating launch angles for rockets to achieve specific orbits. - Engineering : Designing bridges, dams, and structures considering projectile motion in case of falling debris.","title":"Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#implementation-with-python-simulation","text":"Below is the Python code that simulates projectile motion and visualizes the relationship between launch angle and range. import numpy as np import matplotlib.pyplot as plt from scipy.constants import g # Function to compute the range of a projectile def projectile_range(v0, theta, g=9.81): theta_rad = np.radians(theta) return (v0**2 * np.sin(2 * theta_rad)) / g # Define parameters v0 = 50 # Initial velocity in m/s angles = np.linspace(0, 90, 100) # Angle range from 0 to 90 degrees ranges = [projectile_range(v0, theta) for theta in angles] # Plot the range as a function of launch angle plt.figure(figsize=(8,6)) plt.plot(angles, ranges, label='Range vs Angle', color='b') plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (m)\") plt.title(\"Projectile Range as a Function of Angle\") plt.legend() plt.grid() plt.show() # Simulating projectile motion for a given angle def projectile_trajectory(v0, theta, g=9.81): theta_rad = np.radians(theta) t_flight = (2 * v0 * np.sin(theta_rad)) / g # Total flight time t = np.linspace(0, t_flight, num=100) x = v0 * np.cos(theta_rad) * t y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 return x, y # Plot trajectories for different angles plt.figure(figsize=(8,6)) for theta in [15, 30, 45, 60, 75]: x, y = projectile_trajectory(v0, theta) plt.plot(x, y, label=f'{theta} degrees') plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion for Different Angles\") plt.legend() plt.grid() plt.show()","title":"Implementation with Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion","text":"The simulation confirms that the projectile achieves maximum range at \\(\\theta = 45^\\circ\\) . This follows from the mathematical relationship \\(\\sin(2\\theta)\\) , which attains its maximum value at this angle. However, in real-world applications, several factors affect projectile motion: Air Resistance : Causes a reduction in range due to energy loss. Altitude Variations : Gravity is not constant everywhere on Earth. Wind Effects : Can alter the trajectory of projectiles significantly. Non-Uniform Launch Surfaces : In practical applications like sports and military applications, the ground is not always level. Rotational Effects : Spin and the Magnus effect impact sports projectiles such as baseballs and soccer balls.","title":"Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#conclusion","text":"Projectile motion provides a strong foundation for understanding various physical phenomena. Theoretical analysis and computational simulations show how different angles influence range and trajectory. By incorporating additional factors like drag, wind, and varying gravity, more accurate models can be developed for real-world applications.","title":"Conclusion"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 General Equations of Motion in Two Dimensions** Using kinematic equations for motion under constant acceleration: $$ x = x_0 + v_{0x} t \\[ $$ y = y_0 + v_{0y} t - \\frac{1}{2} g t^2 \\] where: - \\( x_0, y_0 \\) = Initial position (often taken as 0) - \\( v_{0x} = v_0 \\cos\\theta \\) (horizontal velocity) - \\( v_{0y} = v_0 \\sin\\theta \\) (initial vertical velocity) Velocity Components at Any Time \\( t \\) ** [ v_x = v_0 \\cos\\theta ] [ v_y = v_0 \\sin\\theta - g t ] Velocity Magnitude and Direction** Resultant velocity at time \\( t \\) : [ v = \\sqrt{v_x^2 + v_y^2} ] Direction (angle \\( \\alpha \\) with horizontal): [ \\tan\\alpha = \\frac{v_y}{v_x} ] Equation of Trajectory To express \\( y \\) as a function of \\( x \\) , eliminate \\( t \\) : $$ y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta} $$ This represents the parabolic** path of the projectile. Time to Reach Maximum Height** Since the vertical velocity becomes zero at the peak: [ t_{\\text{max}} = \\frac{v_0 \\sin\\theta}{g} ] Alternative Form for Maximum Height** Using the kinematic equation \\( v^2 = v_0^2 + 2a s \\) : [ H = \\frac{(v_0 \\sin\\theta)^2}{2g} ] Alternative Form for Range** Since \\( R = v_x \\times T \\) , using \\( T = \\frac{2 v_0 \\sin\\theta}{g} \\) , we get: [ R = \\frac{v_0^2 \\sin 2\\theta}{g} ] import numpy as np import matplotlib.pyplot as plt g = 9.81 # Acceleration due to gravity (m/s^2) v0 = float(input(\"Enter initial velocity (m/s): \")) theta = float(input(\"Enter launch angle (degrees): \")) theta_rad = np.radians(theta) T = (2 * v0 * np.sin(theta_rad)) / g # Total time of flight H = (v0 2 * np.sin(theta_rad) 2) / (2 * g) # Maximum height R = (v0**2 * np.sin(2 * theta_rad)) / g # Horizontal range t = np.linspace(0, T, num=100) x = v0 * np.cos(theta_rad) * t # Horizontal position y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 # Vertical position plt.figure(figsize=(10, 5)) plt.plot(x, y, label=\"Projectile Path\", color=\"blue\") plt.axhline(0, color=\"black\", linewidth=0.5) # Ground line plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion Trajectory\") plt.legend() plt.grid() Show key points plt.scatter([R], [0], color=\"red\", label=\"Range (R)\") plt.scatter([R/2], [H], color=\"green\", label=\"Max Height (H)\") plt.legend() plt.show() Print key results print(f\"Time of Flight: {T:.2f} s\") print(f\"Maximum Height: {H:.2f} m\") print(f\"Range: {R:.2f} m\")","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"General Equations of Motion in Two Dimensions** Using kinematic equations for motion under constant acceleration: $$ x = x_0 + v_{0x} t \\[ $$ y = y_0 + v_{0y} t - \\frac{1}{2} g t^2 \\] where: - \\( x_0, y_0 \\) = Initial position (often taken as 0) - \\( v_{0x} = v_0 \\cos\\theta \\) (horizontal velocity) - \\( v_{0y} = v_0 \\sin\\theta \\) (initial vertical velocity) Velocity Components at Any Time \\( t \\) ** [ v_x = v_0 \\cos\\theta ] [ v_y = v_0 \\sin\\theta - g t ] Velocity Magnitude and Direction** Resultant velocity at time \\( t \\) : [ v = \\sqrt{v_x^2 + v_y^2} ] Direction (angle \\( \\alpha \\) with horizontal): [ \\tan\\alpha = \\frac{v_y}{v_x} ] Equation of Trajectory To express \\( y \\) as a function of \\( x \\) , eliminate \\( t \\) : $$ y = x \\tan\\theta - \\frac{g x^2}{2 v_0^2 \\cos^2\\theta} $$ This represents the parabolic** path of the projectile. Time to Reach Maximum Height** Since the vertical velocity becomes zero at the peak: [ t_{\\text{max}} = \\frac{v_0 \\sin\\theta}{g} ] Alternative Form for Maximum Height** Using the kinematic equation \\( v^2 = v_0^2 + 2a s \\) : [ H = \\frac{(v_0 \\sin\\theta)^2}{2g} ] Alternative Form for Range** Since \\( R = v_x \\times T \\) , using \\( T = \\frac{2 v_0 \\sin\\theta}{g} \\) , we get: [ R = \\frac{v_0^2 \\sin 2\\theta}{g} ] import numpy as np import matplotlib.pyplot as plt g = 9.81 # Acceleration due to gravity (m/s^2) v0 = float(input(\"Enter initial velocity (m/s): \")) theta = float(input(\"Enter launch angle (degrees): \")) theta_rad = np.radians(theta) T = (2 * v0 * np.sin(theta_rad)) / g # Total time of flight H = (v0 2 * np.sin(theta_rad) 2) / (2 * g) # Maximum height R = (v0**2 * np.sin(2 * theta_rad)) / g # Horizontal range t = np.linspace(0, T, num=100) x = v0 * np.cos(theta_rad) * t # Horizontal position y = v0 * np.sin(theta_rad) * t - 0.5 * g * t**2 # Vertical position plt.figure(figsize=(10, 5)) plt.plot(x, y, label=\"Projectile Path\", color=\"blue\") plt.axhline(0, color=\"black\", linewidth=0.5) # Ground line plt.xlabel(\"Horizontal Distance (m)\") plt.ylabel(\"Vertical Distance (m)\") plt.title(\"Projectile Motion Trajectory\") plt.legend() plt.grid()","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#show-key-points","text":"plt.scatter([R], [0], color=\"red\", label=\"Range (R)\") plt.scatter([R/2], [H], color=\"green\", label=\"Max Height (H)\") plt.legend() plt.show()","title":"Show key points"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#print-key-results","text":"print(f\"Time of Flight: {T:.2f} s\") print(f\"Maximum Height: {H:.2f} m\") print(f\"Range: {R:.2f} m\")","title":"Print key results"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}